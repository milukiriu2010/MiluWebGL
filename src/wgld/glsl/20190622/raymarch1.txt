precision mediump   float;

// 経過時間(ミリ秒を1/1000)
uniform   float     t;
// 0.0-1.0に正規化
uniform   vec2      m;
// 描画領域の幅・高さ
uniform   vec2      r;

// 球の半径
const float sphereSize = 1.0;

// オブジェクトまでの最短距離を取得
// 球の位置を原点としている
//       p: レイの先端座標
//  戻り値: "レイの先端⇔球体"までの距離
float distanceFunc(vec3 p){
    return length(p) - sphereSize;
}

void main() {
    // ----------------------------------------------------
    // マウス座標の正規化
    // ----------------------------------------------------
    // 0〜1の範囲で入ってくるマウスの位置を
    // -1〜1の範囲に正規化している
    // Y座標は上下逆のため、正負を逆転している
    // ----------------------------------------------------
    vec2 m = vec2(m.x*2.0-1.0,-m.y*2.0+1.0);
    // ----------------------------------------------------
    // フラグメント座標の正規化
    // ----------------------------------------------------
    // 今から処理しようとしているスクリーン上のピクセル位置を
    // -1〜1の範囲に正規化している
    // ----------------------------------------------------
    vec2 p = (gl_FragCoord.xy * 2.0 - r)/min(r.x, r.y);

    // camera
    vec3 cPos = vec3(0.0,  0.0,  3.0); // カメラの位置
    vec3 cDir = vec3(0.0,  0.0, -1.0); // カメラの向き(視線)
    vec3 cUp  = vec3(0.0,  1.0,  0.0); // カメラの上方向
    vec3 cSide = cross(cDir, cUp);     // 外積を使って横方向を算出
    // 深度を大きくすると、円が大きくなる
    float targetDepth = 1.0;           // フォーカスする深度

    // ray
    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);

    // marching loop
    float distance = 0.0; // レイとオブジェクト間の最短距離
    float rLen = 0.0;     // レイに継ぎ足す長さ
    vec3  rPos = cPos;    // レイの先端位置
    // i を大きくすると、円が大きくなる
    for(int i = 0; i < 16; i++){
        distance = distanceFunc(rPos);
        rLen += distance;
        rPos = cPos + ray * rLen;
    }

    // hit check
    if (abs(distance) < 0.001) {
        gl_FragColor = vec4(vec3(1.0), 1.0);
    }
    else {
        gl_FragColor = vec4(vec3(0.0), 1.0);
    }
}
