precision mediump   float;

// 経過時間(ミリ秒を1/1000)
uniform   float     t;
// 0.0-1.0に正規化
uniform   vec2      m;
// 描画領域の幅・高さ
uniform   vec2      r;
// 法線の出力をするかどうか
//   0: ライティング
//   1: 法線
const int  u_showNormal = 0;

const float PI = 3.14159265;
const float angle = 60.0;
const float fov = angle * 0.5 * PI / 180.0;
vec3  cPos = vec3(0.0, 0.0, 2.0);
// 球の半径
const float sphereSize = 1.0;
// 光源位置
const vec3  lightDir = vec3(-0.577, 0.577, 0.577);

// ----------------------------------------------------
// 座標情報を一定の範囲にクランプする
// ----------------------------------------------------
//  0.0〜3.99999という範囲を
// -2.0〜1.99999という範囲になるようにオフセットしている
// ----------------------------------------------------
vec3 trans(vec3 p) {
    return mod(p,4.0) - 2.0;
}

// ---------------------------------------
// オブジェクトまでの最短距離を取得
// ---------------------------------------
//       p: レイの先端座標
//  戻り値: "レイの先端⇔球体"までの距離
// ---------------------------------------
float distanceFunc(vec3 p){
    return length(trans(p)) - sphereSize;
}

// ---------------------------------------
// 法線を算出する
// ---------------------------------------
//   p: レイとオブジェクトの交点の座標位置
// ---------------------------------------
vec3 getNormal(vec3 p){
    float d = 0.0001;
    // -----------------------------------------
    // 正負それぞれにほんの少しだけずらした座標を
    // distanceFuncに渡すことによって、
    // その戻り値から勾配を計算している
    // これにより、各軸に対して
    // どの程度の傾きになっているかわかる
    // -----------------------------------------
    return normalize(vec3(
        distanceFunc(p + vec3(  d, 0.0, 0.0)) - distanceFunc(p + vec3( -d, 0.0, 0.0)),
        distanceFunc(p + vec3(0.0,   d, 0.0)) - distanceFunc(p + vec3(0.0,  -d, 0.0)),
        distanceFunc(p + vec3(0.0, 0.0,   d)) - distanceFunc(p + vec3(0.0, 0.0,  -d))
    ));
}

void main() {
    // ----------------------------------------------------
    // マウス座標の正規化
    // ----------------------------------------------------
    // 0〜1の範囲で入ってくるマウスの位置を
    // -1〜1の範囲に正規化している
    // Y座標は上下逆のため、正負を逆転している
    // ----------------------------------------------------
    vec2 m = vec2(m.x*2.0-1.0,-m.y*2.0+1.0);
    // ----------------------------------------------------
    // フラグメント座標の正規化
    // ----------------------------------------------------
    // 今から処理しようとしているスクリーン上のピクセル位置を
    // -1〜1の範囲に正規化している
    // ----------------------------------------------------
    vec2 p = (gl_FragCoord.xy * 2.0 - r)/min(r.x, r.y);

    // ray
    vec3 ray = normalize(vec3(sin(fov)*p.x,sin(fov)*p.y,-cos(fov)));

    // marching loop
    float distance = 0.0; // レイとオブジェクト間の最短距離
    float rLen = 0.0;     // レイに継ぎ足す長さ
    vec3  rPos = cPos;    // レイの先端位置
    for(int i = 0; i < 64; i++){
        distance = distanceFunc(rPos);
        rLen += distance;
        rPos = cPos + ray * rLen;
    }

    // hit check
    if (abs(distance) < 0.001) {
        vec3  normal = getNormal(rPos);
        // 法線の出力
        if ( bool(u_showNormal) ) {
            gl_FragColor = vec4(normal,1.0);
        }
        // ライティング
        else {
            float diff   = clamp(dot(lightDir,normal), 0.1, 1.0);
            gl_FragColor = vec4(vec3(diff), 1.0);
        }
    }
    else {
        gl_FragColor = vec4(vec3(0.0), 1.0);
    }
}
