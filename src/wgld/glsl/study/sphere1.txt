precision mediump float;

uniform float t;
uniform vec2 m;
uniform vec2 r;

float sphereSize = 1.1;
vec3 lightPos = vec3(0.5, 0.5, -0.5);

float sphere(vec3 p){
	float d = length(p)-sphereSize;
	return d;
}

float distFnc(vec3 p){
	return sphere(p);
}
 
vec3 getNormal(vec3 p){
	float step = 0.0001;
	return normalize(vec3(
	 distFnc(p + vec3(step, 0, 0)) - distFnc(p + vec3(-step, 0, 0)),
	 distFnc(p + vec3(0, step, 0)) - distFnc(p + vec3(0, -step, 0)),
	 distFnc(p + vec3(0, 0, step)) - distFnc(p + vec3(0, 0, -step)))
	 );
}

void main( void ){
	vec2 p = (gl_FragCoord.xy * 2.0 - r.xy) / min(r.x, r.y);
//  p.x += abs(sin(p.x)*p.x*sin(t))*2.;
//  p.y += abs(cos(p.y)*p.y*cos(t))*2.;

	vec2 q = vec2(0, 0);
	vec3 dc = vec3(0);
	
	float ac = 0.0;
	float screenZ = 2.;
	vec3 camPos = vec3(0, 0, -5);
	vec3 rayPos = vec3(0, 0, 0);
	vec3 rayDir = normalize(vec3(p, screenZ));
	vec3 col = vec3(0.1);
	 
	float depth = 0.;

	 
	for(int i = 0; i < 99; i++){
		rayPos = camPos + rayDir * depth;
		float dist = distFnc(rayPos);
    
	
		for(float j = 0.; j < 5.; j++){
			float k = j+1.;
			vec2 q = p + vec2(sin(t*k*0.3), cos(t*k*0.8))*0.5;
			dc += 0.5 /  length(q); 
			
			dist = max(abs(dist), 0.02);
			ac += exp(-dist*2.);
			col = vec3(ac * 0.008, ac * 0.02, ac*0.1);
			col = col*dc;
			depth += dist*.4;
		}
	}
	 
	gl_FragColor = vec4(col, 1.0);
}
