precision mediump   float;

uniform float t;
uniform vec2  m;
uniform vec2  r;

vec3 hsv(float h, float s, float v){
    vec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));
    return v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);
}

void main() {
    // ----------------------------------------------------
    // マウス座標の正規化
    // ----------------------------------------------------
    // 0〜1の範囲で入ってくるマウスの位置を
    // -1〜1の範囲に正規化している
    // Y座標は上下逆のため、正負を逆転している
    // ----------------------------------------------------
    vec2 m = vec2(m.x*2.0-1.0,-m.y*2.0+1.0);
    // ----------------------------------------------------
    // フラグメント座標の正規化
    // ----------------------------------------------------
    // 今から処理しようとしているスクリーン上のピクセル位置を
    // -1〜1の範囲に正規化している
    // ----------------------------------------------------
    vec2 p = (gl_FragCoord.xy * 2.0 - r)/min(r.x, r.y);

    int j = 0;
    // -------------------------------------
    // 原点を少しずらす
    // -------------------------------------
    vec2 x = vec2(-0.345, 0.654);
    vec2 y = vec2(t * 0.005, 0.0);
    // 漸化式Zの初期値(Z0)
    vec2  z = p;
    // 漸化式Zの繰り返し処理
    for(int i = 0; i < 360; i++){
        j++;
        // 発散判定
        if(length(z) > 2.0){break;}
        // z.x ⇒ Znの実数部
        // z.y ⇒ Znの虚数部
        // x+y ⇒ C
        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + x + y;
    }

    // 時間の経過で色HSV出力する
    float h   = abs(mod(t*15.0-float(j), 360.0) / 360.0);
    vec3  rgb = hsv(h, 1.0, 1.0);
    gl_FragColor = vec4(rgb, 1.0);
}
